module Bcd exposing (card, columns)

{-| Functions to reformat a String as a punch card.

Sample output:

     ________________________________________________
    /SELF-SUFFICIENCY IS THE GREATEST OF ALL WEALTH. |
    | O O   OOOOOO O  O   OO O OO O    O O    OO  OO |
    |  O O        O           O       O   OO    O    |
    |O    OO        O  O O       O OO        O   O   |
    |                           O        O     O     |
    |O    O            O           O                 |
    |  O       O   O     O       O  O     OO    OO O |
    |      O                                         |
    | O          OO        O   O  O           O      |
    |   O   OO                        OO     O       |
    |                        O                       |
    |               O     O                       OO |
    |         O O     O       O                      |
    |________________________________________________|

# API
@docs card, columns

-}

import Array
import Bitwise
import Char
import Maybe.Extra


{-| Return the punch card equivalent of the given String.
-}
card : String -> String
card string =
  let -- Top edge of the punch card.
      top = String.repeat columns "_"
              |> String.cons ' '

      -- A line containing the uppercased input string.
      -- E.g., "/HELLO                                           |"
      input = String.map Char.toUpper string
      len = String.length input
      f x = Array.get (Char.toCode x) holes
              |> Maybe.Extra.unwrap ' ' (\y -> if y == 0 then ' ' else x)
      text = String.map f input
      spaces = String.repeat (columns - len) " "
      textLine = String.concat [ "/", text, spaces, "|" ]

      -- Bottom edge of the punch card.
      bottom = String.concat [ "|", String.repeat columns "_", "|" ]
  in String.join "\n" <| [ top, textLine ] ++ rows input ++ [ bottom ]


{-| Return the 12 rows of potential holes.
-}
rows : String -> List String
rows string =
  List.range 0 11
    |> List.map (row string)


{-| Return a row of potential holes.
-}
row : String -> Int -> String
row string n =
  let f char acc = String.cons (if punch char n then 'O' else ' ') acc
      punches = String.foldr f "" string
      edge = "|"
      after = String.repeat (columns - String.length string) " "
  in String.concat [ edge, punches, after, edge ]


{-| Return True if a hole should be output for the Char in the given row.
-}
punch : Char -> Int -> Bool
punch char row =
  Array.get (Char.toCode char) holes
    |> Maybe.Extra.unwrap False (\w -> bit w (11 - row) /= 0)


{-| Return the i'th bit of the given Int.
-}
bit : Int -> Int -> Int
bit w i =
  Bitwise.shiftLeftBy i 1
    |> Bitwise.and w


{-| Bitmasks for each ISO-8859-1 character.
-}
holes : Array.Array Int
holes =
  [ 0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0
  , 0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0
  , 0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0
  , 0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0
  , 0x0,   0x206, 0x20a, 0x042, 0x442, 0x222, 0x800, 0x406
  , 0x812, 0x412, 0x422, 0xa00, 0x242, 0x400, 0x842, 0x300
  , 0x200, 0x100, 0x080, 0x040, 0x020, 0x010, 0x008, 0x004
  , 0x002, 0x001, 0x012, 0x40a, 0x80a, 0x212, 0x00a, 0x006
  , 0x022, 0x900, 0x880, 0x840, 0x820, 0x810, 0x808, 0x804
  , 0x802, 0x801, 0x500, 0x480, 0x440, 0x420, 0x410, 0x408
  , 0x404, 0x402, 0x401, 0x280, 0x240, 0x220, 0x210, 0x208
  , 0x204, 0x202, 0x201, 0x082, 0x822, 0x600, 0x282, 0x30f
  , 0x900, 0x880, 0x840, 0x820, 0x810, 0x808, 0x804, 0x802
  , 0x801, 0x500, 0x480, 0x440, 0x420, 0x410, 0x408, 0x404
  , 0x402, 0x401, 0x280, 0x240, 0x220, 0x210, 0x208, 0x204
  , 0x202, 0x201, 0x082, 0x806, 0x822, 0x600, 0x282, 0x0
  , 0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0
  , 0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0
  , 0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0
  , 0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0,   0x0
  , 0x206, 0x20a, 0x042, 0x442, 0x222, 0x800, 0x406, 0x812
  , 0x412, 0x422, 0xa00, 0x242, 0x400, 0x842, 0x300, 0x200
  , 0x100, 0x080, 0x040, 0x020, 0x010, 0x008, 0x004, 0x002
  , 0x001, 0x012, 0x40a, 0x80a, 0x212, 0x00a, 0x006, 0x022
  , 0x900, 0x880, 0x840, 0x820, 0x810, 0x808, 0x804, 0x802
  , 0x801, 0x500, 0x480, 0x440, 0x420, 0x410, 0x408, 0x404
  , 0x402, 0x401, 0x280, 0x240, 0x220, 0x210, 0x208, 0x204
  , 0x202, 0x201, 0x082, 0x806, 0x822, 0x600, 0x282, 0x30f
  , 0x900, 0x880, 0x840, 0x820, 0x810, 0x808, 0x804, 0x802
  , 0x801, 0x500, 0x480, 0x440, 0x420, 0x410, 0x408, 0x404
  , 0x402, 0x401, 0x280, 0x240, 0x220, 0x210, 0x208, 0x204
  , 0x202, 0x201, 0x082, 0x806, 0x822, 0x600, 0x282, 0x0
  ]
    |> Array.fromList


{-| Maximum number of columns that the punch card holds.

    columns == 48
-}
columns : Int
columns = 48
